= content_for :page_header_extra do
  %span= t('user.edit.did_not_find_info')
  = link_to t('user.edit.click_to_edit_profile'), edit_user_profile_path(current_user)
= render_page_title t('user.edit_account')

- if current_user == @user && user_signed_in_via_federation?
  #user-federated-info.alert.alert-gray
    %span.title= t('.federated.title')
    - unless @shib_provider.blank?
      %span= t('.federated.your_idp', :idp => @shib_provider)
    = link_to t('.federated.see_your_data'), shibboleth_info_path, :class => 'open-modal'

= simple_form_for @user, :url => user_path(@user), :html => {:method => :put, :class => 'single-column'} do |f|

  .left-column

    #account-info
      %h3= t('user.edit.account_info')
      = f.input :email, :required => false, :disabled => true
      = f.input :username, :required => false, :disabled => true

    #change-password
      %h3= t('user.edit.change_password')
      = f.input :password, :autocomplete => "off", :placeholder => t('user.edit.password.hint'), :required => false
      = f.input :password_confirmation, :required => false
      = f.input :current_password

  .right-column
    #account-preferences
      %h3= t('preferences')

      = f.input :timezone, :label => t('user.timezone'), :required => false, :hint => t("tooltip.timezone") do
        = f.time_zone_select :timezone, nil, :include_blank => true

      = f.input :expanded_post, :label => t('user.view_expanded_posts'), :required => false, :as => :radio_buttons

      = f.input :notification, :label => t('user.notifications'), :required => false do
        - collection = []
        - collection.push([User::NOTIFICATION_VIA_PM, t('user.by_private_message')])
        - collection.push([User::NOTIFICATION_VIA_EMAIL, t('user.by_email')])
        = f.collection_radio_buttons :notification, collection, :first, :last

      = f.input :receive_digest, :label => t('user.receive_digest.description'), :required => false do
        - collection = []
        - collection.push([User::RECEIVE_DIGEST_NEVER, t('user.receive_digest.never')])
        - collection.push([User::RECEIVE_DIGEST_DAILY, t('user.receive_digest.daily')])
        - collection.push([User::RECEIVE_DIGEST_WEEKLY, t('user.receive_digest.weekly')])
        = f.collection_radio_buttons :receive_digest, collection, :first, :last

  - if user_signed_in? and can?(:manage_admin_options, @user)
    #management-options.alert.alert-gray
      %h3= t('.management_options')
      - if can?(:institution_name, @user)
        - current_institution = @user.institution.name if @user.institution
        = f.input :institution_name, :required => false, :placeholder => current_institution
      = f.input :can_record, :required => false if can?(:can_record, @user)
      -# prevent admins from mistakenly removing themselves from being admins
      - unless @user.id == current_user.id
        = f.input :approved, :required => false if can?(:approve, @user)
        = f.input :superuser, :required => false if can?(:superuser, @user)
      - if can?(:disable, @user)
        .input
          = link_to user_path(@user), :confirm => t('.disable_confirm'), :method => :delete do
            = icon_delete(:alt => t('.disable'), :title => t('.disable'))
            = t('.disable')

  = f.button :wrapped, :cancel => edit_user_path(@user), :value => t("save")

  #cancel-account.alert.alert-danger
    %span= t('user.edit.cancel_account')
    = link_to t('user.edit.yes_cancel_account'), user_path(current_user), :data => { :confirm => t("are_you_sure") }, :method => :delete, :class => 'btn btn-small btn-danger'
